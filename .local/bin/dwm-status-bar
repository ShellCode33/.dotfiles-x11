#!/usr/bin/env python3
# coding: utf-8

from typing import Tuple, Union
import psutil
import subprocess
from time import sleep
from datetime import datetime
from os.path import exists

UPDATE_INTERVAL = 5 # in seconds

_last_counter_update = datetime.now()
_last_upload_counter = 0
_last_download_counter = 0

def notify(title: str, content: str = ""):
    subprocess.run(
        ["notify-send", title, content],
        check=True,
    )

def speed_format(bytes_per_sec: Union[int, float]):
    if bytes_per_sec < 100:
        return f"{bytes_per_sec:5.1f} B/s"
    elif bytes_per_sec < 100_000:
        return f"{bytes_per_sec / 1_000:4.1f} KB/s"
    elif bytes_per_sec < 100_000_000:
        return f"{bytes_per_sec / 1_000_000:4.1f} MB/s"
    else:
        return f"{bytes_per_sec / 1_000_000_000:4.1f} GB/s"

def widget_datetime():
    return datetime.now().strftime("%d/%m/%y %H:%M")

def widget_resources():
    cpu_usage_percent  = str(int(psutil.cpu_percent())).rjust(2)
    ram_usage_percent = str(int(psutil.virtual_memory().percent)).rjust(2)
    return f"CPU: {cpu_usage_percent}% RAM: {ram_usage_percent}% ⚙"

def widget_volume():
    default_sink = subprocess.check_output(["pactl", "get-default-sink"])
    default_sink = default_sink.decode().strip()

    sink_config = subprocess.check_output(["pactl", "get-sink-volume", default_sink])
    sink_config = sink_config.decode()
    begin = sink_config.find("/")
    
    if begin == -1:
        raise ValueError(f"Couln't parse sink config: {sink_config}")

    begin += 2
    end = sink_config.find(" ", begin)
    
    if end == -1:
        raise ValueError(f"Couln't parse sink config: {sink_config}")

    current_volume = sink_config[begin:end]

    return f"{current_volume} 🔊"

def widget_battery():
    
    with open("/sys/class/power_supply/BAT0/capacity", "r") as file:
        battery_status = file.read().strip()

    plugged_filename = "/sys/class/power_supply/AC0/online"

    if not exists(plugged_filename):
        plugged_filename = "/sys/class/power_supply/AC/online"

    with open(plugged_filename, "r") as file:
        plugged = bool(int(file.read().strip()))

    return f"{battery_status}% {'🔌' if plugged else '🔋'}"

def _get_default_route() -> Tuple[str, str]:
    ip = ""
    iface = ""

    routes = subprocess.check_output(["ip", "route"]).decode()
    
    for route in routes.split("\n"):
        if route.startswith("default"):
            begin = route.find("dev")
            
            if begin == -1:
                raise ValueError(f"Couln't parse route: {route}")

            begin += 4
            end = route.find(" ", begin)
            
            if end == -1:
                raise ValueError(f"Couln't parse route: {route}")

            iface = route[begin:end].strip()
            break

    iface_config = subprocess.check_output(["ip", "-brief", "address", "show", iface])
    iface_config = iface_config.decode().split()

    if iface_config[1] != "UP":
        ip = iface_config[1]
    else:
        ip = iface_config[2].split("/")[0]

    return ip, iface

def _get_network_speed(default_iface: str) -> Tuple[str, str]:
    global _last_counter_update, _last_upload_counter, _last_download_counter

    counters = psutil.net_io_counters(pernic=True)[default_iface]
    now = datetime.now()

    time_elapsed = (now - _last_counter_update).total_seconds()
    _last_counter_update = now

    dl_bytes_per_sec = (counters.bytes_recv - _last_download_counter) // time_elapsed
    ul_bytes_per_sec = (counters.bytes_sent - _last_upload_counter) // time_elapsed

    _last_download_counter = counters.bytes_recv
    _last_upload_counter = counters.bytes_sent

    if time_elapsed < 1:
        return speed_format(0), speed_format(0)

    return speed_format(dl_bytes_per_sec), speed_format(ul_bytes_per_sec)

def widget_network():
    ip, iface = _get_default_route()
    download_speed, upload_speed = _get_network_speed(iface)

    return f"{ip} ({iface}) {download_speed} ⬇  {upload_speed} ⬆ " 

def widget_mail():
    return "1337 📬"

def widget_updates():
    upgradable_packages = subprocess.check_output(["yay", "-Qu"]).decode()

    if upgradable_packages[-1] == "\n":
        upgradable_packages = upgradable_packages[:-1]

    upgradable_packages_count = len(upgradable_packages.split("\n"))
    return f"{upgradable_packages_count} 🐛"


def update_bar(status: str):
    subprocess.run(["xprop", "-root", "-set", "WM_NAME", status])

def main():
    widgets = {
        widget_resources: "kill id",
        widget_network: "kill id",
        widget_mail: "kill id",
        widget_updates: "kill id",
        widget_volume: "kill id",
        widget_datetime: "kill id",
        widget_battery: "kill id",
    }

    while True:
        try:
            statuses = map(lambda f: f(), widgets)
            update_bar(" | ".join(statuses))
        except Exception as exc:
            notify(f"❌ {exc}")

        sleep(UPDATE_INTERVAL)

if __name__ == "__main__":
    main()
